<?xml version="1.0" encoding="UTF-8"?>

<CRANTaskView>

  <name>NumericalMath</name>
  <topic>Numerical Mathematics With R</topic>
  <maintainer email="hwborchers@googlemail.com">Hans W. Borchers</maintainer>
  <version>2013-10-25</version>
  
  <info>

    <p>This task view on Numerical Mathematics lists R packages and functions 
    that are useful for solving numerical problems in linear algebra and 
    analysis. It shows that R is a viable computing environment for 
    implementing and applying numerical methods outside the realm of 
    statistics.</p>

    <p>The task view will <i>not</i> cover differential equations, 
    optimization problems and solvers, or packages and functions operating 
    on times series, because all these topics are treated extensively in 
    the corresponding task views <view>DifferentialEquations</view>, 
    <view>Optimization</view>, and <view>TimeSeries</view>. These task views 
    together will provide a good overview of what is available in R for the 
    area of Numerical Mathematics.</p>

    <p>The task view has been created to provide an overview of the topic. 
    If some packages are missing or certain topics in numerical math 
    should be treated in more detail, please let the maintainer know.</p>

    <h4>Numerical Linear Algebra</h4>

    <p>As Statistics is based to a large extend on Linear Algebra, many 
    numerical linear algebra routines are present in R, and some only 
    implicitely. Examples of explicitely available functions are vector and 
    matrix operations, matrix (QR) decompositions, solving linear equations, 
    eigenvalues/-vectors, singular value decomposition, or least-squares 
    approximation.</p>

    <ul>
    <li>The recommended package <pkg>Matrix</pkg> provides classes and methods 
        for dense and sparse matrices and operations on them, for example 
        Cholesky and Schur decomposition, matrix exponential, or norms and 
        conditional numbers for sparse matrices.</li>
    <li>Recommended package <pkg>MASS</pkg> adds generalized inverses and null 
        spaces of matrices.</li>
    <li><pkg>expm</pkg> computes the exponential, logarithm, and square root 
        of square matrices, but also powers of matrices or the Frechet 
        derivative. <code>expm()</code> is to be preferred to the function 
        with the same name in <pkg>Matrix</pkg>.</li>
    <li>Package <pkg>onion</pkg> provides routines for manipulating 
        quaternions and octonians (normed division algebras over the real 
        numbers); quaternions can be useful for handling rotations in 
        three-dimensional space.</li>
    <li><pkg>svd</pkg> provides R bindings to state-of-the-art implementations 
        of singular value decomposition (SVD) and eigenvalue/eigenvector 
        computations. Package <pkg>ssvd</pkg> will obtain sparse SVDs using an 
        iterative thresholding method, while <pkg>irlba</pkg> will compute 
        approximate singular values/vectors of large matrices.</li>
    <li>Packages <pkg>RcppArmadillo</pkg> and <pkg>RcppEigen</pkg> provide 
        integration with the C++ template libraries 'Armadillo' resp. 'Eigen' 
        for linear algebra applications written in C++ and integrated in R 
        using <pkg>Rcpp</pkg> for performance and ease of use.</li>
    </ul>

    <h4>Special Functions</h4>

    <p>Many special mathematical functions are present in R, especially 
    logarithms and exponentials, trigonometric and hyperbolic functions, or 
    Bessel and Gamma functions. Many more special functions are available in 
    contributed packages.</p>

    <ul>
    <li>Package <pkg>gsl</pkg> provides an interface to the 'Gnu Scientific 
        Library' that contains implementations of many special functions, for 
        example the Airy and Bessel functions, elliptic and exponential 
        integrals, the hypergeometric function, Lambert's W function, and
        many more.</li>
    <li>Airy and Bessel functions, for real and complex numbers, are also 
        computed in package <pkg>Bessel</pkg>, with approximations for large 
        arguments.</li>
    <li>Package <pkg>pracma</pkg> includes some special functions, such as 
        error functions, incomplete and complex gamma function, exponential 
        and logarithmic integrals, Fresnel integrals, the polygamma and the 
        Riemann zeta function.</li>
    <li>The hypergeometric (and generalized hypergeometric) function, for the 
        whole complex plane, is computed in <pkg>hypergeo</pkg>, including 
        transformation formulas and special values of the parameters.</li>
    <li>Elliptic and modular functions are available in package 
        <pkg>elliptic</pkg>, including the Weierstrass P Function and Jacobi's 
        theta functions.
        There are tools for visualizing complex functions.</li>
    </ul>

    <h4>Polynomials</h4>

    <p>Function polyroot() in base R determines all zeros of a polynomial,  
    based on the Jenkins-Traub algorithm. Linear regression function lm() 
    can perform polynomial fitting when using <code>poly()</code> in the model 
    formula (with option <code>raw=TRUE</code>).</p>

    <ul>
    <li>Packages <pkg>polynom</pkg> and <pkg>polynomF</pkg> provide similar 
        functionality for manipulating univariate polynomials, like 
        evaluating polynomials (Horner scheme), differentiating or integrating 
        them, or solving polynomials, i.e. finding all roots (based on an 
        eigenvalue computation).</li>
    <li>Package <pkg>MonoPoly</pkg> fits univariate polynomials to given data, 
        applying different algorithms.</li>
    <li>For multivariate polynomials, package <pkg>multipol</pkg> provides 
        various tools to manipulate and combine these polynomials of several 
        variables.</li>
    <li>Package <pkg>mpoly</pkg> facilitates symbolic manipulations on 
        multivariate polynomials, including basic differential calculus 
        operations on polynomials, plus some Groebner basis calculations.</li>
    <li>Package <pkg>orthopolynom</pkg> consists of a collection of functions 
        to construct orthogonal polynomials and their recurrence relations, 
        among them Chebyshev, Hermite, and Legendre polynomials, as well as 
        spherical and ultraspherical polynomials. There are functions to 
        operate on these polynomials.</li>
    </ul>

    <h4>Differentiation and Integration</h4>

    <p><code>integrate()</code> is the standard approach for integrating 
    univariate functions in R. It applies an adaptive Gauss-Kronrod quadrature 
    and can handle singularities and unbounded domains to a certain extent. 
    It sometimes has problems with too many subdivisions.</p>

    <ul>
    <li><pkg>numDeriv</pkg> sets the standard for numerical differentiation 
        in R, providing numerical gradients, Jacobians, and Hessians, computed 
        by simple finite differences, Richardson extrapolation, or the highly 
        accurate complex step approach.</li>
    <li>Package <pkg>pracma</pkg>, too, contains functions for computing 
        numerical derivatives, including Richardson extrapolation or the 
        complex step approach. <code>fderiv()</code> computes numerical 
        derivatives of higher orders.
        <pkg>pracma</pkg> contains several routines for numerical integration: 
        adaptive Lobatto quadrature, Romberg integration, Newton-Cotes 
        formulas, Clenshaw-Curtis quadrature rules. <code>integral2()</code> 
        integrates functions in two dimensions, also for domains characterized 
        by polar coordinates or with variable interval limits.</li>
    <li>Package <pkg>gaussquad</pkg> contains a collection of functions to 
        perform Gaussian quadrature, among them Chebyshev, Hermite, Laguerre, 
        and Legendre quadrature rules, explicitly returning nodes and weights 
        in each case. Function <code>gaussquad()</code> in package 
        <pkg>statmod</pkg> does a similar job.</li>
    <li>Adaptive multivariate integration over hyperrectangles in 
        n-dimensional space is available in package <pkg>cubature</pkg> as 
        function <code>adaptIntegrate()</code>, based on C code by Stephen 
        Johnson. The integrand functions can even be multi-valued.</li>
    <li>Package <pkg>SphericalCubature</pkg> employs <pkg>cubature</pkg> to 
        integrate functions over unit spheres and balls in n-dimensional 
        space; conversion routines for multivariate, spherical, and polar 
        coordinates are provided.</li>
    <li>Multi-dimensional numerical integration is also covered in package 
        <pkg>R2Cuba</pkg>, employing a C library by Thomas Hahn. 
        With <code>vegas()</code> it includes an approach to Monte Carlo 
        integration based on importance sampling.</li>
    <li>Package <pkg>SparseGrid</pkg> provides another approach to 
        multivariate integration in high-dimensional spaces. It creates sparse 
        n-dimensional grids that can be used as with quadrature rules.</li>
    <li>Package <pkg>polyCub</pkg> holds some routines for numerical 
        integration over polygonal domains in two dimensions.</li>
    </ul>

    <h4>Interpolation and Approximation</h4>

    <p>Base R provides functions <code>approx()</code> for constant and linear 
    interpolation, and <code>spline()</code> for cubic (Hermite) spline 
    interpolation, while <code>smooth.spline()</code> performs cubic spline 
    approximation. Recommended package <pkg>splines</pkg> creates periodic 
    interpolation splines in function <code>periodicSpline()</code>.</p>

    <ul>
    <li>Interpolation of irregularly spaced data is possible with the 
        <pkg>akima</pkg> package: <code>aspline()</code> for univariate data, 
        <code>bicubic()</code> or <code>interp()</code> for data on a 2D 
        rectangular domain.</li>
    <li>Package <pkg>signal</pkg> contains several <i>filters</i> to smooth 
        discrete data, notably <code>interp1()</code> for linear, spline, and 
        cubic interpolation, <code>pchip()</code> for piecewise cubic Hermite 
        interpolation, and <code>sgolay()</code> for Savitzky-Golay 
        smoothing.</li>
    <li>Package <pkg>pracma</pkg> provides barycentric Lagrange interpolation 
        (in 1 and 2 dimensions) in <code>barylag()</code> resp. 
        <code>barylag2()</code>, and interpolation and approximation of data 
        with rational functions, i.e. in the presence of singularities, in 
        <code>ratinterp()</code> and <code>rationalfit()</code>.</li>
    <li><code>sinterp()</code> in package <pkg>stinepack</pkg> realizes 
        interpolation based on piecewise rational functions by applying 
        Stineman's algorithm. The interpolating function will be monoton in 
        regions where the specified points change monotonically.</li>
    </ul>

    <h4>Root Finding</h4>

    <p><code>uniroot()</code>, implementing the Brent-Decker algorithm, is the 
    basic routine in R to find roots of univariate functions. There are 
    implementations of the bisection algorithm in several contributed 
    packages. For root finding with higher precision there is function 
    <code>unirootR()</code> in the multi-precision package <pkg>Rmpfr</pkg>. 
    And for finding roots of multivariate functions see the following two 
    packages:</p>

    <ul>
    <li>For solving nonlinear systems of equations the <pkg>BB</pkg> package 
        provides (non-monotone) Barzilai-Borwein spectral methods in 
        <code>sane()</code>, including a derivative-free variant in 
        <code>dfsane()</code>, and multi-start features with sensitivity 
        analysis.</li>
    <li>Package <pkg>nleqslv</pkg> solves nonlinear systems of equations 
        using alternatively the Broyden or Newton method, supported by 
        strategies such as line searches or trust regions.</li>
    </ul>

    <h4>Discrete Math and Number Theory</h4>

    <p>Not so many functions are available for numerical number theory.
    Note that integers in double precision can be represented exactly up to 
    <code>2^53-1</code>, above that limit a multi-precision package such as
    <pkg>gmp</pkg> is needed, see below.</p>

    <ul>
    <li>Package <pkg>numbers</pkg> provides functions for factorization, prime 
        numbers, twin primes, primitive roots, modular inverses, extended GCD, 
        etc. Included are some number-theoretic functions like divisor 
        functions or Euler's Phi function.</li>
    <li><pkg>contfrac</pkg> contains various utilities for evaluating 
        continued fractions and partial convergents.</li>
    <li>And the <pkg>partitions</pkg> package enumerates additive partitions 
        of integers, including restricted and unequal partitions.</li>
    <li>Package <pkg>combinat</pkg> generates all permutations or all 
        combinations of a certain length of a set of elements (i.e. a vector); 
        also computes binomial coefficients. <pkg>pcenum</pkg> provides 
        methods to <i>iterate</i> through all permutations or combinations 
        without retrieving them all at one time.</li>
    </ul>

    <h4>Multi-precision Arithmetic and Symbolic Math</h4>

    <ul>
    <li>Multiple precision arithmetic is available in R through package 
        <pkg>gmp</pkg> that interfaces to the GMP C library. Examples are 
        factorization of integers, a probabilistic prime number test, or 
        operations on big rationals -- for which linear systems of equations 
        can be solved.</li>
    <li>Multiple precision floating point operations and functions are 
        provided through package <pkg>Rmpfr</pkg> using the MPFR and GMP 
        libraries. Special numbers and some special functions are included, 
        as well as routines for root finding, integration, and optimization 
        in arbitrary precision.</li>
    <li>Package <pkg>rSymPy</pkg> accesses the symbolic algebra system 'sympy' 
        (written in Python) from R. 
        It supports arbitrary precision computations, linear algebra and 
        calculus, solving equations, discrete mathematics, and much more.</li>
    <li>Package <pkg>Ryacas</pkg> interfaces the computer algebra system 
        'Yacas'. It supports symbolic and arbitrary precision computations 
        in calculus and linear algebra.</li>
    </ul>

    <h4>Matlab, Octave, and Python Interfaces</h4>

    <p>Interfaces to numerical computation software such as Matlab 
    (commercial) or Octave (free) will be important when solving difficult 
    numerical problems. Please note that the commercial programs SAS and 
    Mathematica do have facilities to call R functions.</p>

    <ul>
    <li>The <pkg>matlab</pkg> emulation package contains about 30 simple 
        functions, replicating Matlab functions, using the respective Matlab 
        names and being implemented in pure R.</li>
    <li>Package <pkg>R.matlab</pkg> provides tools to read and write MAT 
        files, which is the Matlab data format. It also enables a 
        one-directional interface with a Matlab process, sending and 
        retrieving objects through a TCP/IP connection.</li>
    <li>Package <pkg>RcppOctave</pkg> provides an interface to Octave (a 
        Matlab clone). It enables calling Octave functions, passing variables 
        between R and Octave, and browsing Octave documentation.</li>
    <li>Python, through its modules 'numpy', 'scipy', and 'pandas', has 
        elaborate and efficient numerical tools available. R Package 
        <pkg>rpython</pkg> permits calls from R to Python, while project 
        <b>RPy</b> (with Python module 'rpy2') interfaces R from Python.</li>
    </ul>
        
  </info>
  
  <packagelist>

    <pkg>akima</pkg>
    <pkg>BB</pkg>
    <pkg>Bessel</pkg>
    <pkg>combinat</pkg>
    <pkg>contfrac</pkg>
    <pkg>cubature</pkg>
    <pkg>elliptic</pkg>
    <pkg>expm</pkg>
    <pkg>gaussquad</pkg>
    <pkg>gmp</pkg>
    <pkg priority="core">gsl</pkg>
    <pkg>hypergeo</pkg>
    <pkg>irlba</pkg>
    <pkg>MASS</pkg>
    <pkg priority="core">Matrix</pkg>
    <pkg>matlab</pkg>
    <pkg>MonoPoly</pkg>
    <pkg>mpoly</pkg>
    <pkg>multipol</pkg>
    <pkg>nleqslv</pkg>
    <pkg>numbers</pkg>
    <pkg priority="core">numDeriv</pkg>
    <pkg>onion</pkg>
    <pkg>orthopolynom</pkg>
    <pkg>partitions</pkg>
    <pkg>pcenum</pkg>
    <pkg>polyCub</pkg>
    <pkg priority="core">polynom</pkg>
    <pkg>polynomF</pkg>
    <pkg>pracma</pkg>
    <pkg>R.matlab</pkg>
    <pkg>R2Cuba</pkg>
    <pkg>RcppArmadillo</pkg>
    <pkg>RcppEigen</pkg>
    <pkg>RcppOctave</pkg>
    <pkg>Rmpfr</pkg>
    <pkg>rpython</pkg>
    <pkg>rSymPy</pkg>
    <pkg>Ryacas</pkg>
    <pkg>signal</pkg>
    <pkg>SparseGrid</pkg>
    <pkg>SphericalCubature</pkg>
    <pkg>splines</pkg>
    <pkg>statmod</pkg>
    <pkg>stinepack</pkg>
    <pkg>ssvd</pkg>
    <pkg>svd</pkg>

  </packagelist>
  
  <links>
    <view>DifferentialEquations</view>
    <view>Optimization</view>
    <view>TimeSeries</view>

    <span>Textbook: <a href="http://tinyurl.com/hdvhomaur">Hands-on Matrix 
        Algebra Using R</a></span>
    <span>Textbook: 
    <a href="http://www.crcpress.com/product/isbn/9781420068726">Introduction 
        to Scientific Programming and Simulation Using R</a></span>
    <span>Textbook: <a href="http://tinyurl.com/vbnmiseur">Numerical 
    Methods in Science and Engineering Using R</a> [to appear]</span>

    <a href="http://www.nr.com/aands/">Abramowitz and Stegun. 
        Handbook of Mathematical Functions</a>
    <a href="http://www.nrbook.com/a/bookcpdf.php">Numerical Recipes:
        The Art of Numerical Computing</a>
    <a href="http://mathworld.wolfram.com/">E. Weisstein's 
        Wolfram MathWorld</a>
    <!-- <a href="">...</a> -->
  </links>

</CRANTaskView>
