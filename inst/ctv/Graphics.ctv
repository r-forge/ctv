<CRANTaskView>

  <name>Graphics</name>
  <topic>Graphic Displays &amp; Dynamic Graphics &amp; Graphic Devices &amp;  
   Visualization </topic>
  <maintainer>Nicholas Lewin-Koh</maintainer>
  
  <info>
    R is rich with facilities for creating and developing interesting graphics.
    Base R contains functionality for many plot types including coplots, 
    mosaic plots, biplots, and the list goes on. There are devices such as 
    postscript, png, jpeg and pdf for outputting graphics as well as device
    drivers for all platforms running R. <pkg>lattice</pkg> and 
    <pkg> grid</pkg> are supplied with R's recommended packages and are 
    usually there in a basic installation. <pkg>lattice</pkg> is an R 
    implementation of William Cleveland's trellis graphics, while grid 
    defines a much more flexible graphics environment than the base R graphics.
    
    R's base graphics are implemented in the same way as in the S3
system developed by Becker, Chambers, and Wilks. There is a static
device, which is treated as a static canvas and objects are drawn on
the device through R plotting commands. The device has a set of global
parameters such as margins and layouts which can be manipulated by the
user using par commands. The R graphics engine does not maintain a
user visible graphics list, and there is no system of double
buffering, so objects cannot be easily edited without redrawing a whole
plot. However the base R graphics can produce many plots with
extremely fine graphics in many specialized instances.  

   One can quickly run into trouble with R's base graphic system if
one wants to design complex layouts where scaling is maintained
properly on resizing, nested graphs are desired or more interactivity
is needed. <pkg> grid</pkg> was designed by Paul Murrell to overcome
some of these limitations and as a result packages like
<pkg>lattice<\pkg>, <pkg>vcd<\pkg> or hexbin (on bioconductor) use
grid for the underlying primitives. When using plots designed with
grid one needs to keep in mind that grid is based on a system of
viewports and graphic objects. To add objects one needs to use grid
commands, eg. grid.polygon() rather than polygon(). Also grid
maintains a stack of viewports from the device and one needs to make
sure the desired viewport is at the top of the stack. There is a great
deal of explanatory documentation included with <pkg> grid</pkg> as
vignettes.     


    The graphics packages in R can be organized roughly into the following 
    topics, though the categories are not mutually exclusive:
    <ul>
      <li><i>Graphics Systems</i>: <pkg>lattice</pkg> is built on top of the <pkg>grid</pkg>
          graphics system and is an R implementation of William Cleveland's trellis
	  system for S-PLUS. <pkg>lattice</pkg> allows building of many plot types
	  with sophisticated layouts based on conditioning. <pkg>ggplot</pkg> is an R 
          implementation of the system described in "A Grammar of Graphics" by Leland 
          Wilkinson. Like <pkg>lattice</pkg>, <pkg>ggplot</pkg> assists in trellis like
          graphics, but allows for much more. Since it is built on the idea of a semantics
          for graphics there is much more emphasis on reshaping data, transformation, and 
          assembling the elements of a plot. Both these packages are built on the lower 
          level package <pkg>grid</pkg>. 
<li><i>Plotting</i>:
          Enhancements for specialized plots can be found in <pkg>plotrix</pkg>,
	  for polar plotting, <pkg>vcd</pkg> for categorical data, hexbin (on bioconductor)
	  for hexagon binning, and <pkg>gplots</pkg> from the <pkg>gregmisc</pkg> bundle
	  for some plotting enhancements</li>
          For 3d plots <pkg>lattice</pkg>,
	  <pkg>scatterplot3d</pkg> and <pkg>misc3d</pkg> provide a selection of plots for
	  different kinds of 3d plotting. <pkg>scatterplot3d</pkg> is based on R's base
	  graphics system, while <pkg>misc3d</pkg> is based on
          <pkg>rgl</pkg>. the package <pkg>onion</pkg> for visualizing 
          quaternions and octonions is well suited to displaying 3d graphics
          based on derived meshes.	  
      <li><i>Applications</i>: This area is not much different from the plotting section
          except that these packages focus on particular applications. The <pkg>gclus</pkg>
	  package focuses on the ordering of graphs to accentuate cluster structure or 
          natural ordering in the data. <pkg>klaR</pkg> focuses on classification methods 
          and how to visualize the separation in high dimensional spaces and there are also 
          some similar plots in <pkg>fpc</pkg>. <pkg>ape</pkg> has functions for plotting 
          phylogenetic trees, and <pkg>LDheatmap</pkg> does specialized plotting for 
          linkage disequilibrium in genetic trait mapping applications. <pkg>Rgraphviz</pkg>
          and <pkg>igraph</pkg> have functions for plotting and layout of graphs</li>

      <li><i>Devices </i>: Whereas <pkg>grid</pkg> is built on top of
the R graphics engine, many in the R community have found the R
graphics engine somewhat inflexible and have written separate device
drivers that either emphasize interactivity or plotting in various
graphics formats. R base supplies devices for postscript, pdf, jpeg
and other formats. Devices on CRAN include <pkg>cairoDevice</pkg> which
is a device based libcairo, which can actually render to many device
types. The cairo device is desgned to work with <pkg>RGTK2</pkg>,
which is an interface to the Gimp Tool Kit, simailr to pyGTK2. <pkg>GDD</pkg>
provides device drivers for several bitmap formats, including gif and
bmp. <pkg>RSvgDevice</pkg> is an SVG device driver and interfaces well with
with vector drawing programs, or R web development packages, such as
<pkg>Rpad</pkg>. When SVG devices for web display developers should be
aware that internet explorer does not support SVG, but has their own
standard. Trust Microsoft. 
<pkg>rgl</pkg> provides a device driver
based on OpenGL, and is good for 3D and interactive
development. Lastly, the Augsburg group supplies a set of packages
that includes a Java-based device, JavaGD.</li> 
      

	<li><i>Colors</i>: There are three main packages dealing with
color, <pkg>colorspace</pkg>which provides a set of functions for
transforming between color spaces and mixcolor for mixing colors
within a colorspace. The s4 class structure used in the design of the
package is convenient for transformations, however the package has
not been updated in some time and most of the functionality is now in
<pkg>grDevices</pkg>. <pkg>RColorBrewer</pkg>, and <pkg>dichromat</pkg>
provide specialized palates, <pkg>dichromat</pkg> is focused on the
color impaired.</li>

      <li><i>Dynamic Graphics</i>: There are several efforts to
implement dynamic graphics systems that interface well with R. RGgobi
embeds the Ggobi interactive graphics system within R,so that one can display a data
frame or several in ggobi directly from R. The package has functions
to support longitudinal data, and graphs using ggobi's edge set
functionality. RoSuDA R packages from the
University of Augsburg group has two packages, iplots and iwidgets as
well as their Java development environment including a java
device, JavaGD. Their interactive graphics tools contain functions for
alpha blending, which produces darker shading around areas with more
data. This is exceptionally useful for parallel coordinate plots where
many lines can quickly obscure patterns. Lastly, the <pkg>rgl</pkg> package has mechanisms for
interactive manipulation of plots, especially 3d rotations and surfaces..</li>  
      
	<li><i>Development</i>: For development of of specialized
graphics packages in R <pkg>grid</pkg> should probably be the first
consideration for any new plot type. <pkg>rgl</pkg> has better tools for
3D graphics, since the device is interactive, though it can be slow. 
An alternative is to use Java and
the java device in the RoSuDA packages, though Java has its own
drawbacks. For porting plotting code to <pkg>grid</pkg>, using the
package <pkg>gridBase</pkg> presents a nice intermediate step to embed
base graphics in grid graphics and vice versa.</li> 
    </ul>
  </info>

  <packagelist>
    <pkg>ape</pkg>
    <pkg>colorspace</pkg> 
    <pkg>dichromat</pkg>
    <pkg>gclus</pkg> 
    <pkg>GDD</pkg> 
    <pkg priority="core"> ggplot </pkg>  
    <pkg>gplots</pkg>
    <pkg>gridBase</pkg> 
    <pkg>gtkDevice</pkg> 
    <pkg>IDPmisc</pkg> 
    <pkg>klaR</pkg> 
    <pkg priority="core">lattice</pkg>  
    <pkg>latticeExtra</pkg> 
    <pkg>LDheatmap</pkg>
    <pkg>misc3d</pkg>
    <pkg priority="core">plotrix</pkg> 
    <pkg priority="core">RColorBrewer</pkg> 
    <pkg priority="core">rgl</pkg> 
    <pkg>RGrace</pkg> 
    <pkg>RGraphics</pkg> 
    <pkg>RSvgDevice</pkg> 
    <pkg>tkrplot</pkg> 
    <pkg>scatterplot3D</pkg>
    <pkg priority="core">vcd</pkg> 
    <pkg>vioplot</pkg> 
    <pkg>xgobi</pkg> 
  </packagelist>

  <links>
    <a href="http://http://bioconductor.org/packages/bioc/stable/src/contrib/html/hexbin.html">Hexbin on BioConductor</a>
    <a href="http://AddictedToR.free.fr/graphiques/">R Graph Gallery</a>
    <a href="http://www.stat.auckland.ac.nz/~paul/">Paul Murrell's home page</a>
    <a href="http://stats.math.uni-augsburg.de/R/">RoSuDA R packages</a>
    <a href="http://www.ggobi.org">Ggobi Data Visualization System</a>
  </links>

</CRANTaskView>
